// Generated by CoffeeScript 1.3.3
(function() {

  (function($) {
    var methods, translate, validations, valitron_name;
    valitron_name = 'valitron';
    translate = function() {
      return "bb";
    };
    methods = {
      init: function(opts) {
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data(valitron_name);
          if (!data) {
            $this.options = $.extend({}, $.fn.valitron.defaults, opts);
            $this.options.rules = methods._parseRules($this.data($.fn.valitron.config.ruleDataElement));
            return $this.data(valitron_name, $this);
          }
        });
      },
      _resolveValue: function(el) {
        if (el.is("input:text, input:password, input:hidden")) {
          return el.val();
        }
        if (el.is("input:checkbox, input:radio")) {
          return el.is(":checked");
        } else {
          return el.text();
        }
      },
      _parseRules: function(rules) {
        var rule, _tmp;
        rule = [];
        _tmp = rules != null ? rules.split($.fn.valitron.config.ruleDelimiter) : void 0;
        if (!_tmp) {
          return rule;
        }
        $.each(_tmp, function(idx, value) {
          var _t;
          if (typeof value === 'string' && value.length > 0) {
            _t = value.split($.fn.valitron.config.ruleMethodDelimiter);
            _t[0] = _t[0].trim();
            _t[1] = _t[1] !== void 0 && _t[1] !== null ? _t[1].split($.fn.valitron.config.ruleParamDelimiter) : null;
            return rule.push(_t);
          }
        });
        return rule;
      },
      _validateOne: function(el, method, parameters) {
        var _ref;
        return (_ref = validations[method]) != null ? _ref.call(el.valitron, el, parameters, methods._resolveValue(el)) : void 0;
      },
      validate: function(extra_options) {
        var _options;
        _options = extra_options ? extra_options : null;
        return this.each(function() {
          var $this, data, opts, _rls, _tmp;
          console.log(_options);
          _tmp = null;
          $this = $(this);
          data = $this.data(valitron_name);
          opts = data.options;
          _rls = methods._parseRules(_options != null ? _options.rules : void 0, $.fn.valitron.config.ruleDataElement);
          _rls = _rls.concat(opts.rules);
          $.extend(true, opts, _options);
          opts.rules = _rls;
          return $.each(opts.rules, function(idx, value) {
            var _re, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ret;
            _re = methods._validateOne($this, value[0], value[1]);
            if (_re !== null && _re !== void 0) {
              if (_re.result === true) {
                if (typeof opts.success === "function") {
                  _ret = (_ref = opts.success) != null ? _ref.call($this, _re.message) : void 0;
                } else {
                  if ((_ref1 = $.fn.valitron.config.globSuccess) != null) {
                    _ref1.call($this, _re.message);
                  }
                }
                if (_ret) {
                  if ((_ref2 = $.fn.valitron.config.globSuccess) != null) {
                    _ref2.call($this, _re.message);
                  }
                }
              } else {
                if (typeof opts.error === "function") {
                  _ret = (_ref3 = opts.error) != null ? _ref3.call($this, _re.message) : void 0;
                } else {
                  if ((_ref4 = $.fn.valitron.config.globError) != null) {
                    _ref4.call($this, _re.message);
                  }
                }
                if (_ret) {
                  if ((_ref5 = $.fn.valitron.config.globError) != null) {
                    _ref5.call($this, _re.message);
                  }
                }
              }
            }
          });
        });
      }
    };
    validations = {
      max: function(el, parameters, value) {
        if (typeof value === "number" && value > parameters[0]) {
          return this.invalidMsg(null, "Number is bigger then " + parameters + "!");
        } else if (typeof value === "string" && value.length > parameters[0]) {
          return this.invalidMsg(null, "String is to long, should be max:" + parameters + "!");
        } else {
          return this.validMsg(null, "Grats man");
        }
      },
      min: function(el, parameters, value) {
        if (typeof value === "number" && value < parameters[0]) {
          return this.invalidMsg(null, "Number is smaller then " + parameters + "!");
        } else if (typeof value === "string" && value.length < parameters[0]) {
          return this.invalidMsg(null, "String should be at least " + parameters + " characters length!");
        } else {
          return this.validMsg(null, "Grats man");
        }
      },
      required: function(el, parameters, value) {
        if (value === null || value === void 0) {
          return this.invalidMsg(null, "Value must be set to something!");
        } else if (typeof value === "string" && (value.length <= 0 || value === "")) {
          return this.invalidMsg(null, "Value must be set to something!");
        } else if (typeof value === "boolean" || typeof value === "number") {
          if (Boolean(value)) {
            return this.validMsg(null, "Grats man");
          } else {
            return this.invalidMsg(null, "Value must be set to something!");
          }
        } else {
          return this.validMsg(null, "Grats man");
        }
      }
    };
    $.fn.valitron = function(method) {
      var init;
      init = methods.init.apply(this, arguments);
      if (methods[method] && method.charAt(0 !== "_")) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (!method || typeof method === 'object') {
        return methods.init.apply(this, arguments);
      } else {
        $.error("Method " + method + " does not exists on jQuery.valitron");
      }
    };
    $.fn.valitron.defaults = {
      rules: null,
      language: 'en',
      success: null,
      error: null
    };
    $.fn.valitron.config = {
      globSuccess: function(msg) {
        console.log(msg);
        return this.removeClass("error");
      },
      globError: function(msg) {
        console.log(msg);
        return this.addClass("error");
      },
      ruleDelimiter: "|",
      ruleMethodDelimiter: ":",
      ruleParamDelimiter: ",",
      ruleDataElement: 'validation'
    };
    $.fn.valitron.ruleMsg = function(res, transl, msg) {
      var _r;
      _r = {
        result: res,
        translation: transl,
        message: msg
      };
      return _r;
    };
    $.fn.valitron.validMsg = function(transl, msg) {
      return this.ruleMsg(true, transl, msg);
    };
    $.fn.valitron.invalidMsg = function(transl, msg) {
      return this.ruleMsg(false, transl, msg);
    };
  })(jQuery);

}).call(this);
