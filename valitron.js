// Generated by CoffeeScript 1.3.3
(function() {

  (function($) {
    var methods, validations, valitron_name;
    valitron_name = 'valitron';
    methods = {
      init: function(opts) {
        return this.each(function() {
          var $this, data;
          $this = $(this);
          data = $this.data(valitron_name);
          if (!data) {
            $this.options = $.extend({}, $.fn.valitron.defaults, opts);
            $this.options.rules = methods._parseRules($this.data($.fn.valitron.config.ruleDataElement));
            return $this.data(valitron_name, $this);
          }
        });
      },
      show: function() {
        console.log("showing");
        return methods.destroy();
      },
      destroy: function() {
        return console.log("destroying");
      },
      _resolveValue: function(el) {
        if (el.is("SPAN")) {
          return el.text();
        }
      },
      _parseRules: function(rules) {
        var rule, _tmp;
        rule = [];
        _tmp = rules.split($.fn.valitron.config.ruleDelimiter);
        $.each(_tmp, function(idx, value) {
          var _t;
          if (value !== null && typeof value === 'string' && value.length > 0) {
            _t = value.split($.fn.valitron.config.ruleMethodDelimiter);
            _t[0] = _t[0].trim();
            _t[1] = _t[1] !== void 0 && _t[1] !== null ? _t[1].split($.fn.valitron.config.ruleParamDelimiter) : null;
            return rule.push(_t);
          }
        });
        return rule;
      },
      _validateOne: function(el, method, parameters) {
        return typeof validations[method] === "function" ? validations[method](el, parameters, methods._resolveValue(el)) : void 0;
      },
      validate: function(options) {
        var $this, data, opts, _rls, _tmp;
        _tmp = null;
        $this = $(this);
        data = $this.data(valitron_name);
        opts = data.options;
        _rls = methods._parseRules(options.rules, $.fn.valitron.config.ruleDataElement);
        _rls = _rls.concat(opts.rules);
        $.extend(true, opts, options);
        opts.rules = _rls;
        console.log(opts);
        $.each(opts.rules, function(idx, value) {
          var _re, _ref, _ref1, _ret;
          _re = methods._validateOne($this, value[0], value[1]);
          if (_re !== null && _re !== void 0) {
            console.log(typeof _re, _re, typeof opts.success);
            if (_re[0] === true) {
              _ret = (_ref = opts.success) != null ? _ref.call($this, _re[1]) : void 0;
            } else {
              _ret = (_ref1 = opts.error) != null ? _ref1.call($this, _re[1]) : void 0;
            }
            if (_ret != null) {
              consle.log("more");
            }
          }
        });
      }
    };
    validations = {
      max: function(el, parameters, value) {
        var _e, _s;
        _e = [false, "Number is bigger then " + parameters + "!"];
        _s = [true, "Grats man"];
        if (value > parameters[0]) {
          return _e;
        } else {
          return _s;
        }
      }
    };
    $.fn.valitron = function(method) {
      console.log("Metthod: " + method);
      methods.init.apply(this, arguments);
      if (methods[method] && method.charAt(0 !== "_")) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (!method || typeof method === 'object') {
        return methods.init.apply(this, arguments);
      } else {
        $.error("Method " + method + " does not exists on jQuery.valitron");
      }
    };
    $.fn.valitron.defaults = {
      rules: null,
      language: 'en',
      success: null,
      error: null
    };
    $.fn.valitron.config = {
      globSuccess: null,
      globError: null,
      ruleDelimiter: "|",
      ruleMethodDelimiter: ":",
      ruleParamDelimiter: ",",
      ruleDataElement: 'validation'
    };
  })(jQuery);

}).call(this);
